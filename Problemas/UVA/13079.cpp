
#include <bits/stdc++.h>
using namespace std;

struct node{
  int x,y;
  bool operator<(const node &other)const{ if(x==other.x) return y>other.y; return x > other.x; }
};

int main(){
    int cases;
    while(scanf("%d",&cases)==1 && cases!=0){
        int x,y;
        priority_queue<node> pq;
        for(int i=0; i<cases;i++){
            scanf("%d %d",&x,&y);
            pq.push(node{x,y});
        }
        int res = 0,size=0;
        while(!pq.empty()){
            res++;
            node aux = pq.top(); pq.pop();
            size = aux.y-1;
            while(!pq.empty()){
                aux = pq.top();
                if(aux.x>size) break;
                size = min(aux.y-1,size);
                pq.pop();
            }
        }
        printf("%d\n",res);
    }
    return 0;
}

/*
INPUT
1
0 10
3
1 8
5 10
0 5
3
4 5
0 2
7 10
2
0 2
1 2
10
0 7
1 8
1 5
2 6
3 7
4 8
5 9
9 10
10 12
10 11
4
2 5
3 5
2 3
2 5
2
0 10
0 10
4
0 2
2 4
4 6
6 8
3
0 1
1 20
1 19
5
0 4
1 2
1 3
3 4
4 5
230
0 5
0 4
0 3
0 2
0 1
1 6
1 5
1 4
1 3
1 2
2 7
2 6
2 5
2 4
2 3
3 8
3 7
3 6
3 5
3 4
4 9
4 8
4 7
4 6
4 5
5 10
5 9
5 8
5 7
5 6
6 11
6 10
6 9
6 8
6 7
7 12
7 11
7 10
7 9
7 8
8 13
8 12
8 11
8 10
8 9
9 14
9 13
9 12
9 11
9 10
10 15
10 14
10 13
10 12
10 11
11 16
11 15
11 14
11 13
11 12
12 17
12 16
12 15
12 14
12 13
13 18
13 17
13 16
13 15
13 14
14 19
14 18
14 17
14 16
14 15
15 20
15 19
15 18
15 17
15 16
16 21
16 20
16 19
16 18
16 17
17 22
17 21
17 20
17 19
17 18
18 23
18 22
18 21
18 20
18 19
19 24
19 23
19 22
19 21
19 20
20 25
20 24
20 23
20 22
20 21
21 26
21 25
21 24
21 23
21 22
22 27
22 26
22 25
22 24
22 23
23 28
23 27
23 26
23 25
23 24
24 29
24 28
24 27
24 26
24 25
25 30
25 29
25 28
25 27
25 26
26 31
26 30
26 29
26 28
26 27
27 32
27 31
27 30
27 29
27 28
28 33
28 32
28 31
28 30
28 29
29 34
29 33
29 32
29 31
29 30
30 35
30 34
30 33
30 32
30 31
31 36
31 35
31 34
31 33
31 32
32 37
32 36
32 35
32 34
32 33
33 38
33 37
33 36
33 35
33 34
34 39
34 38
34 37
34 36
34 35
35 40
35 39
35 38
35 37
35 36
36 41
36 40
36 39
36 38
36 37
37 42
37 41
37 40
37 39
37 38
38 43
38 42
38 41
38 40
38 39
39 44
39 43
39 42
39 41
39 40
40 45
40 44
40 43
40 42
40 41
41 46
41 45
41 44
41 43
41 42
42 47
42 46
42 45
42 44
42 43
43 48
43 47
43 46
43 45
43 44
44 49
44 48
44 47
44 46
44 45
45 50
45 49
45 48
45 47
45 46
31
691 707
872 874
841 852
337 356
441 456
780 787
396 407
788 808
805 810
14 21
213 217
154 162
341 348
337 351
219 220
451 466
478 493
376 388
956 957
294 297
880 888
937 944
490 498
412 431
926 933
540 555
236 242
414 434
845 853
220 227
318 336
26
12 21
803 815
896 908
3 13
112 125
831 835
792 795
268 274
753 767
476 491
991 1000
991 1000
661 665
818 822
574 578
329 340
536 556
269 285
22 35
655 672
909 914
635 644
727 741
644 662
729 744
308 315
27
599 607
61 77
86 101
690 710
982 983
654 669
735 749
392 396
759 767
462 468
30 38
374 390
171 189
801 803
645 649
117 120
841 857
6 18
91 101
24 40
978 986
452 457
739 755
653 670
138 140
691 708
972 976
9
620 638
138 142
590 600
277 290
331 350
166 176
145 160
813 833
70 75
9
865 874
307 312
355 359
509 512
213 232
205 214
481 485
466 478
28 40
38
920 935
354 369
41 47
504 523
292 298
183 199
371 379
835 853
246 250
468 476
270 286
214 220
194 202
35 44
320 321
997 1000
475 486
492 497
930 949
183 187
783 785
40 44
901 920
337 348
74 81
294 295
883 899
36 45
843 857
480 485
134 150
275 286
952 955
222 227
908 919
576 596
395 405
675 685
26
750 768
8 23
267 283
638 642
446 458
80 96
422 434
514 530
97 99
47 53
441 447
45 64
750 761
990 1000
721 724
68 82
885 902
840 846
494 509
71 73
461 473
230 237
518 523
893 906
882 892
805 812
12
444 463
140 151
197 204
508 511
764 782
676 692
188 195
545 564
277 287
514 530
759 767
639 657
13
937 941
984 1000
610 614
583 589
110 119
493 501
464 483
634 648
961 979
673 691
720 735
212 231
76 93
1
455 464
16
377 397
532 548
285 288
923 934
16 32
559 560
539 546
902 922
643 653
985 1000
260 277
490 507
760 775
541 561
438 454
939 951
3
811 816
116 127
397 401
39
296 303
507 526
214 233
364 370
576 594
605 608
438 455
216 225
866 870
835 853
112 129
572 579
614 625
656 669
948 964
340 356
234 237
708 717
977 980
872 878
303 315
519 529
210 217
257 275
297 306
543 558
570 585
638 646
975 983
932 949
665 666
271 287
489 504
858 866
415 434
525 537
165 181
748 756
347 367
2
919 932
113 128
9
458 477
348 358
244 248
231 246
901 912
66 71
87 88
429 441
494 503
0


OUTPUT
1
2
3
1
4
2
1
4
2
3
46
24
20
21
9
8
28
20
11
13
1
14
3
27
2
8

*/
